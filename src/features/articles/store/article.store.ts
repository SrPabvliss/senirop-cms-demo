import { create } from 'zustand'
import type { IArticleStore } from './article.store.interface'
import { v4 as uuidv4 } from 'uuid'
import { ArticlesService } from '@/features/articles/data/services/article.service'
import { persist, createJSONStorage } from 'zustand/middleware'

/**
 * Store name for the article store based on the environment
 */
const STORE_NAME = `article-store-${import.meta.env.MODE}`

/**
 * Store for the articles, persist the articles in the local storage
 */
export const useArticleStore = create<IArticleStore>()(
  persist(
    (set, get) => ({
      articles: [],
      isLoading: false,
      /**
       * Initialize the store, if the articles are not in the store, get them from the service
       */
      init: async () => {
        set({ isLoading: true })
        if (get().articles.length === 0) {
          const articles = await ArticlesService.getInstance().getArticles()
          set({ articles })
        }
        set({ isLoading: false })
      },
      setArticles: (articles) => set({ articles }),
      /**
       * Add an article, id will be generated by uuid
       */
      addArticle: (article) => {
        set((state) => ({
          articles: [...state.articles, { ...article, id: uuidv4() }],
        }))
      },
      updateArticle: (id, article) =>
        set((state) => ({
          articles: state.articles.map((a) =>
            a.id === id ? { ...a, ...article } : a
          ),
        })),
      deleteArticle: (id) =>
        set((state) => ({
          articles: state.articles.filter((a) => a.id !== id),
        })),
    }),
    {
      name: STORE_NAME,
      storage: createJSONStorage(() => localStorage),
    }
  )
)
